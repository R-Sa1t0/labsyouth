// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadXdp_l2brg returns the embedded CollectionSpec for xdp_l2brg.
func loadXdp_l2brg() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Xdp_l2brgBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load xdp_l2brg: %w", err)
	}

	return spec, err
}

// loadXdp_l2brgObjects loads xdp_l2brg and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*xdp_l2brgObjects
//	*xdp_l2brgPrograms
//	*xdp_l2brgMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadXdp_l2brgObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadXdp_l2brg()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// xdp_l2brgSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_l2brgSpecs struct {
	xdp_l2brgProgramSpecs
	xdp_l2brgMapSpecs
}

// xdp_l2brgSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_l2brgProgramSpecs struct {
	XdpL2brg *ebpf.ProgramSpec `ebpf:"xdp_l2brg"`
}

// xdp_l2brgMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type xdp_l2brgMapSpecs struct {
}

// xdp_l2brgObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadXdp_l2brgObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_l2brgObjects struct {
	xdp_l2brgPrograms
	xdp_l2brgMaps
}

func (o *xdp_l2brgObjects) Close() error {
	return _Xdp_l2brgClose(
		&o.xdp_l2brgPrograms,
		&o.xdp_l2brgMaps,
	)
}

// xdp_l2brgMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadXdp_l2brgObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_l2brgMaps struct {
}

func (m *xdp_l2brgMaps) Close() error {
	return _Xdp_l2brgClose()
}

// xdp_l2brgPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadXdp_l2brgObjects or ebpf.CollectionSpec.LoadAndAssign.
type xdp_l2brgPrograms struct {
	XdpL2brg *ebpf.Program `ebpf:"xdp_l2brg"`
}

func (p *xdp_l2brgPrograms) Close() error {
	return _Xdp_l2brgClose(
		p.XdpL2brg,
	)
}

func _Xdp_l2brgClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdp_l2brg_bpfel.o
var _Xdp_l2brgBytes []byte
